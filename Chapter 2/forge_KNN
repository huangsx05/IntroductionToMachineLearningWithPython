import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import mglearn

# generate dataset
X, y = mglearn.datasets.make_forge()

# plot dataset
mglearn.discrete_scatter(X[:, 0], X[:, 1], y) # 输入X第0列和第1列作为x轴,将y作为y轴
plt.legend(["Class 0", "Class 1"], loc=4)
plt.xlabel("First feature")
plt.ylabel("Second feature")
plt.show()
print("X.shape: {}".format(X.shape))

### 展示KNN工作原理，似乎默认用make_forge数据来展示
mglearn.plots.plot_knn_classification(n_neighbors=1)
plt.show() 
mglearn.plots.plot_knn_classification(n_neighbors=3)
plt.show() 

###Split dataset
from sklearn.model_selection import train_test_split
X, y = mglearn.datasets.make_forge()
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)

### Set KNN Classifier 实例化对象
from sklearn.neighbors import KNeighborsClassifier
clf = KNeighborsClassifier(n_neighbors=3) # k=3

### Build model (fit classifier with traning data)
clf.fit(X_train, y_train)

### Predict and evaluate with test data
print("Test set predictions: {}".format(clf.predict(X_test)))
print("Test set accuracy: {:.2f}".format(clf.score(X_test, y_test)))

### visualize decision boundary (for k = 1,3,9)
fig, axes = plt.subplots(1, 3, figsize=(10, 3)) #生成1行，3个图
print("fig: ", fig) # print结果：Figure(1000x300)
print("axes: \n", axes) # axes是一维向量，3个元素分别代表3个图的index（可以理解为序号或者位置）
for n_neighbors, ax in zip([1, 3, 9], axes):
	# the fit method returns the object self (for KNN), so we can instantiate
	# and fit in one line
	clf = KNeighborsClassifier(n_neighbors=n_neighbors).fit(X, y)
	mglearn.plots.plot_2d_separator(clf, X, fill=True, eps=0.5, ax=ax, alpha=.4) #绘制分界线
	mglearn.discrete_scatter(X[:, 0], X[:, 1], y, ax=ax) #绘制散点图
	ax.set_title("{} neighbor(s)".format(n_neighbors))
	ax.set_xlabel("feature 0")
	ax.set_ylabel("feature 1")
axes[0].legend(loc=3)
plt.show()