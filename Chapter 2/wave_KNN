import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import mglearn

### Load Dataset
X, y = mglearn.datasets.make_wave(n_samples=40)
plt.plot(X, y, 'o')
plt.ylim(-3, 3)
plt.xlabel("Feature")
plt.ylabel("Target")
plt.show()

### 展示KNN regression工作原理（k=1)
mglearn.plots.plot_knn_regression(n_neighbors=1)
plt.show()
### 展示KNN regression工作原理（k=3)
mglearn.plots.plot_knn_regression(n_neighbors=3)
plt.show() 

### split the wave dataset into a training and a test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)
### instantiate the model and set the number of neighbors to consider to 3
from sklearn.neighbors import KNeighborsRegressor
reg = KNeighborsRegressor(n_neighbors=3)

### fit the model using the training data and training targets
reg.fit(X_train, y_train)

### Make prediction
print("Test set predictions:\n{}".format(reg.predict(X_test))) 

### Evaluate the prediction results
print("Test set R^2: {:.2f}".format(reg.score(X_test, y_test))) # R2 score for regression


### Make prediction on a new dataset
## Create 3 drawing boards
fig, axes = plt.subplots(1, 3, figsize=(15, 4))

## create dataset: 1,000 data points, evenly spaced between -3 and 3
line = np.linspace(-3, 3, 1000).reshape(-1, 1) # reshape(-1,1)转换成一行
#print(line)

## make predictions using 1, 3, or 9 neighbors
for n_neighbors, ax in zip([1, 3, 9], axes):
	reg = KNeighborsRegressor(n_neighbors=n_neighbors)
	# train
	reg.fit(X_train, y_train)
	# predict curve - 这其实就对应linear regression的直线
	ax.plot(line, reg.predict(line))
	# plot train data and test data, in different patterns
	ax.plot(X_train, y_train, '^', c=mglearn.cm2(0), markersize=8)
	ax.plot(X_test, y_test, 'v', c=mglearn.cm2(1), markersize=8)
	# train score, test score
	ax.set_title(
	"{} neighbor(s)\n train score: {:.2f} test score: {:.2f}".format(
	n_neighbors, reg.score(X_train, y_train),
	reg.score(X_test, y_test)))
	ax.set_xlabel("Feature")
	ax.set_ylabel("Target")
axes[0].legend(["Model predictions", "Training data/target",
"Test data/target"], loc="best")
plt.show()