import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import mglearn

### Load the dataset
from sklearn.datasets import load_iris
iris_dataset = load_iris()

### Overview of the dataset
print("Keys of iris_dataset:\n{}".format(iris_dataset.keys()))     #['data', 'target', 'target_names', 'DESCR', 'feature_names', 'filename']
print(iris_dataset['DESCR'][:193] + "\n...")                       #DESCR is a description of the dataset
print("Target names: {}".format(iris_dataset['target_names']))     #3 classes
print("Feature names: \n{}".format(iris_dataset['feature_names'])) #4 features
print("Type of data: {}".format(type(iris_dataset['data'])))       #array - features of 150 samples
print("Shape of data: {}".format(iris_dataset['data'].shape))      #(150,4), 4 is inaccordance with 4 features; 150 samples
print("Type of target: {}".format(type(iris_dataset['target'])))   #array - lables for 150 samples
print("Shape of target: {}".format(iris_dataset['target'].shape))  #(150,) - one dimensional array
print("Target:\n{}".format(iris_dataset['target']))                # 3 classes: 0,1,2; accroding to 'target names'
print("filename: {}".format(iris_dataset['filename']))   

### Split train/test data (default 75/25)
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(
iris_dataset['data'], iris_dataset['target'], random_state=0)

print("X_train shape: {}".format(X_train.shape))
print("y_train shape: {}".format(y_train.shape))
print("X_test shape: {}".format(X_test.shape))
print("y_test shape: {}".format(y_test.shape))

### Inspect / Visualize the data
# create dataframe from data in X_train
# label the columns using the strings in iris_dataset.feature_names
iris_dataframe = pd.DataFrame(X_train, columns=iris_dataset.feature_names)
# create a scatter matrix from the dataframe, color by y_train
grr = pd.plotting.scatter_matrix(iris_dataframe, c=y_train, figsize=(15, 15), marker='o',
hist_kwds={'bins': 20}, s=60, alpha=.8, cmap=mglearn.cm3)
plt.show()

###KNN Classifier 实例化对象
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=1) # 之后的build model和predict都要用到这个knn对象

###Build the model
knn.fit(X_train, y_train)

###Make prediction for a single example
X_new = np.array([[5, 2.9, 1, 0.2]]) # example to be predicted. 两个中括号，注意这是一个二维矩阵，因为sklearn只接受二维矩阵
print("X_new.shape: {}".format(X_new.shape))
prediction = knn.predict(X_new)
print("Prediction: {}".format(prediction))
print("Predicted target name: {}".format(
iris_dataset['target_names'][prediction]))

###Evalutate the model 判断predict是否正确
y_pred = knn.predict(X_test) # predict for all X_test
print("Test set predictions:\n {}".format(y_pred)) 
print("Test set score (method 1): {:.2f}".format(np.mean(y_pred == y_test))) # Method 1 for calculating accuracy
print("Test set score (method 2): {:.2f}".format(knn.score(X_test, y_test))) # Method 2

'''
### Simplified Code
X_train, X_test, y_train, y_test = train_test_split(
iris_dataset['data'], iris_dataset['target'], random_state=0)
knn = KNeighborsClassifier(n_neighbors=1)
knn.fit(X_train, y_train)
print("Test set score: {:.2f}".format(knn.score(X_test, y_test)))
'''