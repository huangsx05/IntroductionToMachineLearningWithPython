import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.svm import SVC

# load data
iris = load_iris()

# set train and test data
X_train, X_test, y_train, y_test = train_test_split(
	iris.data, iris.target, random_state=0)

#To deal with these kinds of “conditional” parameters,
#GridSearchCV allows the param_grid to be a list of dictionaries.
#if kernel='linear', gamma is not used, and trying different values for
#gamma would be a waste of time.
param_grid = [{'kernel': ['rbf'],
				'C': [0.001, 0.01, 0.1, 1, 10, 100],
				'gamma': [0.001, 0.01, 0.1, 1, 10, 100]},
				{'kernel': ['linear'],
				'C': [0.001, 0.01, 0.1, 1, 10, 100]}]

print("List of grids:\n{}".format(param_grid))

grid_search = GridSearchCV(SVC(), param_grid, cv=5)
grid_search.fit(X_train, y_train)
print("Best parameters: {}".format(grid_search.best_params_))
print("Best cross-validation score: {:.2f}".format(grid_search.best_score_))

#look at the cv_results_
results = pd.DataFrame(grid_search.cv_results_)
# we display the transposed table so that it better fits on the page:
print(results.T) #use display in Jupyter